{"version":3,"sources":["apiConnect/fetchApi.js","components/Loader.js","App.js","index.js"],"names":["fetchData","name1","name2","a","axios","method","url","process","headers","useQueryString","params","fname","sname","data","console","log","className","style","backgroundColor","fontFamily","useState","setName1","setName2","query","setQuery","loadData","setLoadData","apiCall","width","height","xmlns","fillRule","clipRule","d","type","value","onChange","e","target","placeholder","onClick","percentage","length","result","ReactDOM","render","document","getElementById"],"mappings":"iQAEaA,EAAS,uCAAG,WAAOC,EAAOC,GAAd,iBAAAC,EAAA,+EAEMC,IAAM,CACzBC,OAAQ,MACRC,IAAKC,uDACLC,QAAS,CACL,eAAgB,2BAChB,kBAAmBD,iCACnB,iBAAkBA,qDAClBE,gBAAgB,GAEpBC,OAAQ,CACJC,MAAOV,EACPW,MAAOV,KAbE,uBAETW,EAFS,EAETA,KAFS,kBAgBVA,GAhBU,gCAmBjBC,QAAQC,IAAR,MAnBiB,yDAAH,wDCAP,G,MAAA,WACX,OACI,yBAAKC,UAAU,gBACX,yBAAKA,UAAU,UACf,uBAAGC,MAAO,CAACC,gBAAiB,QAASC,WAAY,yBAAjD,iDCAG,aAAO,IAAD,EACSC,mBAAS,IADlB,mBACVnB,EADU,KACHoB,EADG,OAESD,mBAAS,IAFlB,mBAEVlB,EAFU,KAEHoB,EAFG,OAGSF,mBAAS,IAHlB,mBAGVG,EAHU,KAGHC,EAHG,OAIeJ,oBAAS,GAJxB,mBAIVK,EAJU,KAIAC,EAJA,KAMXC,EAAO,uCAAG,4BAAAxB,EAAA,sEAERuB,GAAaD,GAFL,SAGWzB,EAAUC,EAAOC,GAH5B,OAGFW,EAHE,OAIRW,EAASX,GAJD,uBAMRa,GAAY,GANJ,uEAAH,qDASb,OACI,yBAAKV,UAAU,aACVS,EAAW,kBAAC,EAAD,MAAc,KAC1B,wBAAIT,UAAU,eAAd,yBAC2B,IACvB,yBAAKY,MAAM,KAAKC,OAAO,KAAKC,MAAM,6BAA6BC,SAAS,UAAUC,SAAS,WACvF,0BAAMC,EAAE,6ZAIhB,uBAAGjB,UAAU,mBACT,yCADJ,0KAGA,yBAAKA,UAAU,cACX,2BAAOkB,KAAK,OAAOC,MAAOlC,EAAOmC,SAAU,SAACC,GAAD,OAAOhB,EAASgB,EAAEC,OAAOH,QAAQI,YAAY,uBAD5F,IACoH,6BAChH,2BAAOL,KAAK,OAAOC,MAAOjC,EAAOkC,SAAU,SAACC,GAAD,OAAOf,EAASe,EAAEC,OAAOH,QAAQI,YAAY,wBAF5F,IAEqH,6BACjH,4BAAQL,KAAK,SAASM,QAASb,GAA/B,cAIHJ,EAAMkB,WACc,IAAjBxC,EAAMyC,QAAiC,IAAjBxC,EAAMwC,OACxB,uBAAG1B,UAAU,UAAb,2BAC6BO,EAAMZ,MADnC,MAC6CY,EAAMX,MADnD,+BACsFW,EAAMkB,WAD5F,KAC0GlB,EAAMoB,QAEhH,uBAAG3B,UAAU,UAAb,+CACJ,OC3ChB4B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.5bf54a67.chunk.js","sourcesContent":["import axios from \"axios\"\n\nexport const fetchData = async (name1, name2) => {\n    try {\n        const { data } = await axios({\n            method: \"GET\",\n            url: process.env.REACT_APP_API_URL,\n            headers: {\n                \"content-type\": \"application/octet-stream\",\n                \"x-rapidapi-host\": process.env.REACT_APP_API_HOST,\n                \"x-rapidapi-key\": process.env.REACT_APP_API_KEY,\n                useQueryString: true\n            },\n            params: {\n                fname: name1,\n                sname: name2\n            }\n        });\n        return data\n    }\n    catch (err) {\n        console.log(err)\n    }\n}\n","import React from \"react\";\n\nexport default () => {\n    return (\n        <div className=\"load-overlay\">\n            <div className=\"heart\"></div>\n            <p style={{backgroundColor: 'white', fontFamily: \"'Roboto', sans-serif\"}}>Please wait while we do the calculation...</p>\n        </div>\n    );\n};\n","import React, { useState } from \"react\";\nimport { fetchData } from \"./apiConnect/fetchApi\";\n\nimport \"./App.css\";\nimport Loading from \"./components/Loader\";\n\nexport default () => {\n    const [name1, setName1] = useState(\"\");\n    const [name2, setName2] = useState(\"\");\n    const [query, setQuery] = useState({});\n    const [loadData, setLoadData] = useState(false);\n\n    const apiCall = async () => {\n        try {\n            setLoadData(!loadData);\n            const data = await fetchData(name1, name2);\n            setQuery(data);\n        } finally {\n            setLoadData(false);\n        }\n    };\n    return (\n        <div className=\"container\">\n            {loadData ? <Loading /> : null}\n            <h1 className=\"main-header\">\n                simple love calculator{\" \"}\n                <svg width=\"24\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\" fillRule=\"evenodd\" clipRule=\"evenodd\">\n                    <path d=\"M12 21.593c-5.63-5.539-11-10.297-11-14.402 0-3.791 3.068-5.191 5.281-5.191 1.312 0 4.151.501 5.719 4.457 1.59-3.968 4.464-4.447 5.726-4.447 2.54 0 5.274 1.621 5.274 5.181 0 4.069-5.136 8.625-11 14.402m5.726-20.583c-2.203 0-4.446 1.042-5.726 3.238-1.285-2.206-3.522-3.248-5.719-3.248-3.183 0-6.281 2.187-6.281 6.191 0 4.661 5.571 9.429 12 15.809 6.43-6.38 12-11.148 12-15.809 0-4.011-3.095-6.181-6.274-6.181\" />\n                </svg>\n            </h1>\n\n            <p className=\"app-description\">\n                <span>welcome</span> to simple love calculator, where you can calculate how you matches with your crush or your significant others by comparing both of your name using special algorithm.\n            </p>\n            <div className=\"form-input\">\n                <input type=\"text\" value={name1} onChange={(e) => setName1(e.target.value)} placeholder=\"input first name..\" /> <br />\n                <input type=\"text\" value={name2} onChange={(e) => setName2(e.target.value)} placeholder=\"input second name..\" /> <br />\n                <button type=\"submit\" onClick={apiCall}>\n                    Calculate\n                </button>\n            </div>\n            {query.percentage ? (\n                name1.length !== 0 && name2.length !== 0 ? (\n                    <p className=\"result\">\n                        The Algorithm said that {query.fname} & {query.sname} have a match percentage of {query.percentage}% {query.result}\n                    </p>\n                ) : <p className=\"result\">You didn't input any name, please try again</p>\n            ) : null}\n        </div>\n    );\n};\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n"],"sourceRoot":""}